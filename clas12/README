This folder contains scripts to perform the following tasks involved in clas12 CVT alignment:
1) filtering CLAS12 raw-data files to only include the events used for CLAS12 CVT alignment
2) running reconstruction on CLAS12 data
3) running the alignment on the reconstructed CLAS12 data
4) modifying the calibration-conditions database (ccdb) after alignment
5) creating diagnostic plots of the reconstruction and alignment performance.
6) Automating #2-#5 in an iterative process.  


Before running the scripts in this package, you will need the following software packages.  The first 5 are common ones that you may already have installed on your computer for other projects, and can probably find the installation instructions on Google. The others are very specific ones.
1) Java.  A programming language.  The installed version must be a JDK (java development kit, which is capable of both compiling and executing java), and not a JRE (java runtime environment, which can only execute java).
2) Maven.  This is a program maintained by Apache that is used for organizing the code when compilating large Java projects.  
3) ROOT.  A CERN-maintained library for performing analyses and creating plots.
4) Python.  A programming language
5) Scons.  A software construction tool.

Very specific packages.  
6) clas12-offline-software:  This package contains the code for reconstructing CLAS-12 data.  You will need to use the dev-align3 branch, which contains added functionality for extracting information needed for running alignment.  After downloading the project and checking out the correct branch, you will need to compile the package.  
# download the software
git clone https://github.com/JeffersonLab/clas12-offline-software/
# checkout the dev-align3 branch (where the pre-alignment matrix-extraction is implemented)
cd clas12-offline-software
git checkout dev-align3
# build the package
./build-coatjava.sh
# add this line to your .bashrc, .cshrc, .bash_profile, or equivalent.  replace /path/to with the
# appropriate path to the clas12-offline-software installation directory.  In the example shown below,
# clas12-offline-software is in the home directory
export PATH=$PATH:~/clas12-offline-software/coatjava/bin

7)  ccdb:  calibration conditions database package for clas12. 

First, you must obtain the most recent snapshot (sqlite) of the CCDB and copy to somewhere on your local computer.  The following steps will accomplish this:

#find out what the latest version of the CCDB snapshot is
version=`curl https://clasweb.jlab.org/clas12offline/sqlite/ccdb/LATEST`
echo latest snapshot version of CCDB is ${version}
# copy this file to somewhere on your computer.  Replace ${directory} with the actual directory where you want
# to put the file
wget https://clasweb.jlab.org/clas12offline/sqlite/ccdb/ccdb_${version}.sqlite ${directory}/ccdb_${version}.sqlite
#check to make sure the file has been copied to the destination directory
ls ${directory}/ccdb_${version}.sqlite 

Next add the following lines to your ~/.bashrc (Linux) or ~/.bash_profile (Mac), replacing ${directory} with the absolute path to the directory where the file is located) and ${version} with the version of the ccdb file.  Also, replace ${username} with the username that you want to register yourself as in the ccdb:

export CCDB_CONNECTION=sqlite:///${directory}/ccdb_${version}.sqlite
export CCDB_USER=${username}

For instance, I have in my .bashrc file:

export CCDB_CONNECTION=sqlite:////home/sebouh/input_for_alignment/ccdb_2022-01-16.sqlite
export CCDB_USER=sebouh

Then run the following line of code in your console:
source ~/.bashrc # if you are using Linux
OR
source ~/.bash_profile # if you are using MacOS

The version of the ccdb library that is on github at https://github.com/JeffersonLab/ccdb is not properly maintained.  Theferoefe I have included a working copy of this in the file alignment/clas12/ccdb.tar.gz.  Unzip and untar this file:
gunzip ccdb.tar.gz
tar -xvf ccdb.tar

Then add the following line to your ~/.bashrc (Linux) or ~/.bash_profile (MacOS) file:
source /path/to/ccdb/environment.bash

The next step is to make sure that ccdb is installed correctly and that the ccdb sqlite is not corrupted.  First try running "ccdb -i" to enter interactive mode.  While in interactive mode, enter the following command:
dump geometry/cvt/svt/layeralignment
This should show a bunch of numbers. 

8)  If you haven't already done so, compile Martin Weber's alignment code (one folder up from this one), following the instructions in alignment/README.  Since this analysis does not require the use of Weber's simulations, it is not necessary to install CLHEP, which is only included in the simulation package.

9)  Finally, To compile the various utilities in this folder (alignment/clas12) do the following:
./compile_clas12_cvt_utils.sh


To perform alignment:

First obtain the input files.  For the RGB spring 2019 run period, the runs needed for alignment are 6342 (field-off tracks from the target) and 6117 (cosmic tracks).  These (or the equivalent files from a different run group) need to be copied to the local machine, and then preprocessed.   The preprocessing includes
1) updating the hipo index to include banks defined in the dev-align3 branch of clas12-offline-software
2) running a preliminary reconstruction
3) filtering out events that are not relevant for CVT alignment
4) removing the preliminary reconstruction information.  

To preprocess a file, do the following commands
cd scripts/misc/
./preprocess.sh input.hipo output.hipo
(or "./preprocess.sh input.hipo output.hipo --cosmic" if the file is a cosmics data file)

One can alternatively use an evio file for input.


After preprocessing the files, you can then use these files for alignment.  Go to the "generic" scripts folder, where the scripts for running iterations of recon, KAA and ccdb updates can be found.  
cd scripts/generic

Then, copy the file ./iterate_for_paper.sh to another name
cp ./iterate_for_paper.sh ./iterate_custom.sh
Edit the file ./iterate_custom.sh and change the names of the input field-off and cosmic files used.  Other options can be edited as well.  

Below are the lines that should be modified, which set the locations of the files used for input and for the ccdb.  zf stands for "Zero [magnetic] field", and refers to the file with tracks from the target with the solenoid turned off.  To run reconstruction with only cosmics or only field-off tracks from the target, set the other input file name to be blank.  

export input_file_zf=$HOME/input_for_alignment/fieldoff_6342.hipo 
export input_file_cosmics=$HOME/input_for_alignment/cosmic_6117.hipo  
export CCDB_CONNECTION=sqlite:///$HOME/input_for_alignment/ccdb_2022-01-16.sqlite


Running ./iterate_custom.sh will begin the iterative process.   Folders with names plots_pass_1, etc will be created in the clas12/scripts/generic directory.  These will contain the reconstructed hipo files, the input file for the KAA, the output of the KAA, text files with the new alignment parameters, and a large number of diagnostic plots, produced in each iteration.  The final alignment parameters can be found in plot_pass_N/devN_bmt.txt and plot_pass_N/devN_svt.txt, where N is the number of iterations specified in the iteration script.  


